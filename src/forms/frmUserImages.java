/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import models.Account;
import models.ButtonColumn;
import models.UserImages;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import models.OperationJson;
import routes.FormRoute;
import utils.AES;
import utils.RequestServer;

/**
 *
 * @author dell
 */
public class frmUserImages extends javax.swing.JFrame {
    private static Account acc;
    private List<UserImages> userImages;
    private ButtonColumn buttonColumn;
    private final Gson gson;
    /**
     * Creates new form frmLoadImageData
     * @param acc
     * @param worker
     */
    public frmUserImages(Account acc) {
        initComponents();
        frmUserImages.acc = acc;
        gson=new Gson();        
        renderButtonDelete();
        getRootPane().setBorder(BorderFactory.createMatteBorder(3, 3, 3, 3, Color.cyan)); 
        loadImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbImage = new javax.swing.JTable();
        btnTroVe = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ảnh người dùng");
        setResizable(false);

        tbImage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã người dùng", "Mã ảnh", "Ảnh", "Xoá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbImage);

        btnTroVe.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        btnTroVe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return.png"))); // NOI18N
        btnTroVe.setText("Trở về");
        btnTroVe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTroVeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTroVe))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTroVe, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTroVeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTroVeActionPerformed
        FormRoute.openFormInfo(this, acc);
    }//GEN-LAST:event_btnTroVeActionPerformed

    private void loadTable(List<UserImages> listUserImages){
        if(!listUserImages.isEmpty()){
            DefaultTableModel model = (DefaultTableModel) tbImage.getModel();
            model.setRowCount(0);
            for (UserImages image : listUserImages) {
                String userID = image.getID_User();
                String imageID = image.getID_Image();
                byte[] imageData = image.getImages();
                ImageIcon imageIcon = new ImageIcon(imageData);
                Image scaledImage = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
                model.addRow(new Object[]{userID, imageID, scaledImageIcon});
            }
            // Set the custom cell renderer for the image column
            TableColumn imageColumn = tbImage.getColumnModel().getColumn(2);
            imageColumn.setCellRenderer(new ImageRenderer());
            tbImage.setRowHeight(100);
        }
        else{
            JOptionPane.showMessageDialog(this, "Người dùng chưa có ảnh!","Lỗi",0);
        }
    }
    private void loadImage() {
        DefaultTableModel model = (DefaultTableModel) tbImage.getModel();
        try {
            AES aes=new AES();
            String publicKeyReceived=RequestServer.requestPublicKey();
            
            String encryptAccountID=aes.encrypt(acc.getID_User(), aes.getPublicKeyFromString(publicKeyReceived));
            
            OperationJson requestLoadImageJson=new OperationJson();
            requestLoadImageJson.setOperation("load-image");
            requestLoadImageJson.setPublicKey(aes.encodePublicKey(aes.getPublicKey()));
            requestLoadImageJson.setData(encryptAccountID);
            
            String responseFromServer=RequestServer.sendRequestToServer(requestLoadImageJson);
            OperationJson responseJson=gson.fromJson(responseFromServer, OperationJson.class);
            String result=responseJson.getOperation();
            switch (result) {
                case "Success":
                    String listImagesDecypted=aes.decrypt(responseJson.getData().toString(), aes.getPrivateKey());
                    userImages = gson.fromJson(listImagesDecypted, new TypeToken<List<UserImages>>() {}.getType());
                    loadTable(userImages);
                    JOptionPane.showMessageDialog(this, "Đã load "+userImages.size()+" khuôn mặt!");
                    break;
                case "NoImage":
                    JOptionPane.showMessageDialog(this, "Người dùng chưa có ảnh!","Lỗi",0);
                    model.setRowCount(0);
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Không thể load ảnh!","Lỗi",0);
                    model.setRowCount(0);
                    break;
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra!"+ex.toString(),"Lỗi",0);
        }    
        
    }
    
    private void renderButtonDelete(){       
        clickLastColumnCell();
        Icon deleteIcon = new  ImageIcon("src\\icons\\delete.png");
        buttonColumn = new ButtonColumn(tbImage, tbImage.getColumnCount() - 1,deleteIcon);
    }
    
    private void clickLastColumnCell(){
        
        tbImage.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tbImage.rowAtPoint(e.getPoint());
                int column = tbImage.columnAtPoint(e.getPoint());
                if (column == tbImage.getColumnCount() - 1) {
                    
                    int selectedRow = tbImage.convertRowIndexToModel(row);
                    Object idImage = tbImage.getModel().getValueAt(selectedRow, 1);
                    int result = JOptionPane.showConfirmDialog(
                            null,
                            "Bạn có chắc muốn xoá ảnh này này? ",
                            "Xác nhận",
                            JOptionPane.YES_NO_OPTION);

                    if (result == JOptionPane.YES_OPTION)
                    {
                        try {
                            AES aes=new AES();
                            //Gửi yêu cầu nhận khoá Public từ server
                            String receivedPublicKey=RequestServer.requestPublicKey();
                            //Mã hoá idImage với Public key của ser nhận được
                            String encryptedIdImage=aes.encrypt(idImage.toString(), aes.getPublicKeyFromString(receivedPublicKey));
                            //Khởi tạo model OperationJson để tạo request lên server
                            OperationJson requestDeleteImageJson=new OperationJson();
                            requestDeleteImageJson.setOperation("delete-image");
                            requestDeleteImageJson.setPublicKey(aes.encodePublicKey(aes.getPublicKey()));
                            requestDeleteImageJson.setData(encryptedIdImage);
                            //Gửi request và nhận kết quả từ server
                            String resultFromServer=RequestServer.sendRequestToServer(requestDeleteImageJson);
                            OperationJson resultDeleteJson=gson.fromJson(resultFromServer, OperationJson.class);
                            if(resultDeleteJson.getOperation().equals("Success")){
                                JOptionPane.showMessageDialog(frmUserImages.this, "Đã xoá ảnh!");
                                loadImage();
                            }
                            else{
                                 JOptionPane.showMessageDialog(frmUserImages.this, "Có lỗi xảy ra!"+resultFromServer,"Lỗi",0);
                            }

                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(frmUserImages.this, "Có lỗi xảy ra!"+ex.toString(),"Lỗi",0);
                        }
                    }
                }

            }
        });
    }
    // Custom cell renderer to display the image
    class ImageRenderer extends JLabel implements TableCellRenderer {
        public ImageRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setIcon((Icon) value);
            return this;
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUserImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUserImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUserImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUserImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUserImages(acc).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTroVe;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbImage;
    // End of variables declaration//GEN-END:variables
}
